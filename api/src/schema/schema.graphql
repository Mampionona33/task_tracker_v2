scalar GraphQLDate
enum StateType {
  Normal
  Sby
  Paf
}
enum ProcessingType {
  isOff
  isPause
  isPlay
}
enum SubmitType {
  isSubmited
  isUnsubmited
}
#Fiches ---------
type Fiches {
  _id: String!
  user: User!
  id: Int
  typeTrav: String
  cat: String
  numFiche: String
  statuCom: String
  statuIvpn: String
  url: String
  state: StateType
  submiteState: SubmitType
  nbBefor: Int
  nbAft: Int
  startDate: GraphQLDate
  validDate: GraphQLDate
  elapstedTime: Int
  productivity: Float
  comment: String
  processing: ProcessingType
  lastUpdate: GraphQLDate
}
##Filtre Fiches -------
input SearchFichesInputs {
  id: Int
  user: UserInput
  cat: String
  statuCom: String
  statuIvpn: String
  numFiche: String
  typeTrav: String
  submiteState: SubmitType
  processing: String
}
##Inputs Fiches --------
input FichesInputs {
  user: UserInput!
  typeTrav: String = "Empty Type"
  cat: String
  numFiche: String
  statuCom: String
  statuIvpn: String
  url: String
  state: StateType = Normal
  nbBefor: Int = 0
  nbAft: Int = 0
  startDate: GraphQLDate
  validDate: GraphQLDate
  submiteState: SubmitType = isUnsubmited
  comment: String
  processing: ProcessingType = isOff
  elapstedTime: Int = 0
  lastUpdate: GraphQLDate
}
##Update Fiches --------
input UpdateFiches {
  _id: String
  id: Int
  user: UserInput
  typeTrav: String
  cat: String
  numFiche: String
  statuCom: String
  statuIvpn: String
  url: String
  state: StateType
  submiteState: SubmitType
  nbBefor: Int
  nbAft: Int
  startDate: GraphQLDate
  validDate: GraphQLDate
  elapstedTime: Int
  productivity: Float
  processing: ProcessingType
  comment: String
  lastUpdate: GraphQLDate
}

#TypeTache ----------
type TypeTache {
  _id: String!
  id: Int!
  name: String!
  objectif: Float
}
##Taches Inputs ------
input TachesInputs {
  name: String
  objectif: Float
}

##Statut Commerciales
type StatCom {
  _id: String!
  id: Int!
  name: String!
}
##User Type---------
type User {
  name: String
  given_name: String
  username: String
  family_name: String
  nickname: String
  picture: String
  locale: String
  sub: String
  phone_number: String
  phone_number_verified: String
  preferred_username: String
  profile: String
  update_at: GraphQLDate
  website: String
  zoneinfo: String
  created_at: GraphQLDate
  email: String
  email_verified: Boolean
  last_password_reset: GraphQLDate
  user_id: String
}

##User Input-------
input UserInput {
  name: String
  given_name: String
  username: String
  family_name: String
  nickname: String
  picture: String
  locale: String
  phone_number: String
  phone_number_verified: String
  preferred_username: String
  profile: String
  sub: String
  update_at: GraphQLDate
  website: String
  zoneinfo: String
  created_at: GraphQLDate
  email: String
  email_verified: Boolean
  last_password_reset: GraphQLDate
  user_id: String
}

input StatComInput {
  name: String
}

##Statut IVPN
type StatIvpn {
  _id: String!
  id: Int!
  name: String!
}
input StatIvpnInput {
  name: String!
}

#Responses
type DeleteResponse {
  acknowledged: Boolean
  deletedCount: Int
}
type UpdateResponse {
  acknowledged: Boolean
  matchedCount: Int
  modifiedCount: Int
}

input FilterById {
  id: Int
}

type IdCounter {
  _id: String
  current: Int
}

#### top level declarations
type Query {
  about: String!
  listFiches: [Fiches!]!
  listTypeTaches: [TypeTache!]!
  listStatCom: [StatCom!]!
  listStatIvpn: [StatIvpn!]!
  searchFiches(input: SearchFichesInputs): [Fiches]
  idCounter: [IdCounter]
}

type Mutation {
  setAboutMessage(message: String!): String

  # Mutation for type de taches
  typeTachesAdd(typeTache: TachesInputs): TypeTache
  # typeTacheUpdate(filter: FilterById!): TypeTache
  typeTacheUpdate(filter: FilterById, update: TachesInputs): TypeTache
  typeTacheDelete(filter: FilterById): DeleteResponse!

  # mutation for fiche
  fichesAdd(fiche: FichesInputs!): Fiches!
  fichesUpdate(filter: FilterById, update: UpdateFiches): Fiches
  fichesDelete(filter: FilterById): DeleteResponse!

  # Mutation for status Commerciales
  statComAdd(statCom: StatComInput): StatCom!
  statComUpdate(filter: FilterById, update: StatComInput): StatCom
  statComDelete(filter: FilterById): DeleteResponse!

  # Mutation status IVPN
  statIvpnAdd(statIvpn: StatIvpnInput): StatIvpn!
  statIvpnUpdate(filter: FilterById, update: StatIvpnInput): StatIvpn
  statIvpnDelete(filter: FilterById): DeleteResponse!
}
